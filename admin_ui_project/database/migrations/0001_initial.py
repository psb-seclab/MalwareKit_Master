# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=40, verbose_name='Action Name')),
                ('enabled', models.BooleanField(verbose_name='Is action active?', default=True)),
                ('frequency', models.CharField(max_length=40, choices=[('Once', 'Once'), ('Anytime', 'Anytime'), ('Hourly', 'Hourly'), ('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Biweekly', 'Biweekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Bianually', 'Bianually'), ('Yearly', 'Yearly')], default='Anytime', verbose_name='Frequency')),
            ],
            options={
                'verbose_name_plural': '  Botmaster - Actions',
                'verbose_name': 'Action',
            },
        ),
        migrations.CreateModel(
            name='Antivirus',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('antivirus_detected', models.CharField(max_length=40, verbose_name='Detected Antivirus')),
            ],
            options={
                'verbose_name_plural': ' Information   - Antiviruses',
                'verbose_name': 'Antivirus',
            },
        ),
        migrations.CreateModel(
            name='AvailableConnections',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('ip_address', models.CharField(max_length=20, verbose_name='IP Address')),
                ('port', models.CharField(max_length=10, verbose_name='Port')),
                ('last_online', models.DateTimeField(verbose_name='Last Online', auto_now=True)),
                ('online', models.BooleanField(verbose_name='Online?', default=True)),
            ],
            options={
                'verbose_name_plural': 'Configuration  - Available Connections',
                'verbose_name': 'Available Connections',
            },
        ),
        migrations.CreateModel(
            name='AvailableFiles',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('file_path', models.CharField(max_length=100, verbose_name='File Path')),
                ('file_type', models.CharField(max_length=40, verbose_name='File Type')),
                ('timestamp', models.DateTimeField(verbose_name='Date Added', auto_now_add=True)),
                ('active', models.BooleanField(verbose_name='Is this file active for getting?', default=True)),
            ],
            options={
                'verbose_name_plural': 'Configuration  - Available Files',
                'verbose_name': 'Available Files',
            },
        ),
        migrations.CreateModel(
            name='AvailableRegistry',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('registry_key', models.CharField(max_length=100, verbose_name='Registry')),
                ('registry_type', models.CharField(max_length=30, verbose_name='Registry Type')),
                ('timestamp', models.DateTimeField(verbose_name='Date Added', auto_now_add=True)),
                ('active', models.BooleanField(verbose_name='Is registry active for checking?', default=True)),
            ],
            options={
                'verbose_name_plural': 'Configuration  - Available Registry',
                'verbose_name': 'Available Registry',
            },
        ),
        migrations.CreateModel(
            name='Bot_Action',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('enabled', models.BooleanField(verbose_name='Is action available to bot?', default=True)),
                ('action_count', models.IntegerField(verbose_name='Action Count', default=0)),
                ('last_performed', models.DateTimeField(verbose_name='Last performed', auto_now=True)),
                ('action', models.ForeignKey(to='database.Action')),
            ],
            options={
                'verbose_name_plural': ' Botmaster - Bot Actions',
                'verbose_name': 'Bot Action',
            },
        ),
        migrations.CreateModel(
            name='Bot_Sample',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('bot_id', models.CharField(max_length=40, verbose_name='Bot ID')),
                ('created', models.DateTimeField(verbose_name='Date Created', auto_now_add=True)),
                ('connection_count', models.IntegerField(verbose_name='Connection Count', default=0)),
                ('encrypted', models.BooleanField(verbose_name='Is connection encrypted?', default=True)),
                ('connection_allowed', models.BooleanField(verbose_name='Is connection allowed?', default=True)),
            ],
            options={
                'verbose_name_plural': '  Botmaster - Bot Samples',
                'verbose_name': 'Bot Sample',
            },
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('ip_address', models.CharField(max_length=20, verbose_name='IP Address')),
                ('connection_type', models.CharField(max_length=60, default='NA', verbose_name='Connection Type')),
                ('timestamp', models.DateTimeField(verbose_name='Date Connected', auto_now_add=True)),
                ('bot_id', models.ForeignKey(to='database.Bot_Sample')),
            ],
            options={
                'verbose_name_plural': ' Information - Connections',
                'verbose_name': 'Connection',
            },
        ),
        migrations.CreateModel(
            name='ConnectionRules',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('no_connect_before', models.TimeField(verbose_name='No connections before')),
                ('no_connect_after', models.TimeField(verbose_name='No connections after')),
                ('max_connections_per_day', models.IntegerField(verbose_name='Max connections per day (-1 = no limit)')),
                ('max_connections', models.IntegerField(verbose_name='Max Connections (-1 = no limit)')),
                ('on_failure', models.CharField(max_length=60, choices=[('Allow', 'Allow'), ('Deny', 'Deny'), ('Deny:Respond', 'Deny:Respond'), ('Deny:Action', 'Deny:Action'), ('Deny:Respond/Action', 'Deny:Respond/Action')], default='Allow', verbose_name='On failure')),
                ('response', models.CharField(max_length=60, choices=[('Nothing', 'Nothing'), ('Disable:Mac Address', 'Disable:Mac Address'), ('Disable:Bot ID', 'Disable:Bot ID'), ('Disable:Mac/Bot', 'Disable:Mac/Bot')], default='Nothing', verbose_name='Response')),
                ('action', models.CharField(max_length=60, choices=[('Nothing', 'Nothing'), ('Kill', 'Action:Kill'), ('Kill and Destroy', 'Action:Kill and Destroy')], default='Nothing', verbose_name='Action to send')),
                ('active', models.BooleanField(verbose_name='Are rules active?', default=True)),
            ],
            options={
                'verbose_name_plural': 'Configuration  - Connection Rules',
                'verbose_name': 'Connection Rules',
            },
        ),
        migrations.CreateModel(
            name='Cookies',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('web_browser', models.CharField(max_length=40, verbose_name='Web Browser')),
                ('filename', models.CharField(max_length=20, verbose_name='Filename')),
                ('connection', models.ForeignKey(verbose_name='Connection ID', to='database.Connection')),
            ],
            options={
                'verbose_name_plural': ' Information  - Cookies',
                'verbose_name': 'Cookies',
            },
        ),
        migrations.CreateModel(
            name='Files',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('filename', models.CharField(max_length=20, verbose_name='Filename')),
                ('avail_file', models.ForeignKey(verbose_name='File Path', to='database.AvailableFiles')),
                ('connection', models.ForeignKey(verbose_name='Connection ID', to='database.Connection')),
            ],
            options={
                'verbose_name_plural': ' Information  - Files',
                'verbose_name': 'File',
            },
        ),
        migrations.CreateModel(
            name='Keylogging',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('filename', models.CharField(max_length=40, verbose_name='Filename')),
                ('connection', models.ForeignKey(verbose_name='Connection ID', to='database.Connection')),
            ],
            options={
                'verbose_name_plural': ' Information  - Keylogging Files',
                'verbose_name': 'Keylogging File',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('ip_address', models.CharField(max_length=20, unique=True)),
                ('country', models.CharField(max_length=50, verbose_name='County')),
            ],
            options={
                'verbose_name_plural': ' Information - Locations',
                'verbose_name': 'Location',
            },
        ),
        migrations.CreateModel(
            name='Registry',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('detected', models.BooleanField(verbose_name='Was registry detected?', default=False)),
                ('connection', models.ForeignKey(verbose_name='Connection ID', to='database.Connection')),
                ('registry', models.ForeignKey(verbose_name='Registry Key', to='database.AvailableRegistry')),
            ],
            options={
                'verbose_name_plural': ' Information   - Registries',
                'verbose_name': 'Registry',
            },
        ),
        migrations.CreateModel(
            name='Rules',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('rule', models.CharField(max_length=100, verbose_name='Rule')),
                ('rule_type', models.CharField(max_length=60, choices=[('IP', 'IP'), ('Mac Address', 'Mac Address')], default='IP', verbose_name='Rule Type')),
                ('active', models.BooleanField(verbose_name='Is rule active?', default=True)),
            ],
            options={
                'verbose_name_plural': 'Configuration  - Custom Rules',
                'verbose_name': 'Custom Rules',
            },
        ),
        migrations.CreateModel(
            name='System_Information',
            fields=[
                ('mac_address', models.CharField(max_length=20, serialize=False, primary_key=True, verbose_name='Mac Address', unique=True)),
                ('op_system', models.CharField(max_length=30, default='None', verbose_name='Operating System')),
                ('cpu', models.CharField(max_length=20, default='None', verbose_name='CPU')),
                ('created', models.DateTimeField(verbose_name='Date Added', null=True, auto_now_add=True)),
                ('connection_allowed', models.BooleanField(verbose_name='Is connection allowed?', default=True)),
            ],
            options={
                'verbose_name_plural': ' Information    - System Information',
                'verbose_name': 'System Information',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(verbose_name='ID', auto_created=True, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=40, verbose_name='Username')),
                ('connection', models.ForeignKey(verbose_name='Connection ID', to='database.Connection')),
            ],
            options={
                'verbose_name_plural': ' Information    - Usernames',
                'verbose_name': 'Username',
            },
        ),
        migrations.AddField(
            model_name='connection',
            name='mac_address',
            field=models.ForeignKey(to='database.System_Information'),
        ),
        migrations.AddField(
            model_name='bot_action',
            name='bot_id',
            field=models.ForeignKey(to='database.Bot_Sample'),
        ),
        migrations.AddField(
            model_name='availableconnections',
            name='bot_id',
            field=models.ForeignKey(verbose_name='Bot ID', to='database.Bot_Sample'),
        ),
        migrations.AddField(
            model_name='availableconnections',
            name='mac_address',
            field=models.ForeignKey(verbose_name='Mac Address', to='database.System_Information'),
        ),
        migrations.AddField(
            model_name='antivirus',
            name='connection',
            field=models.ForeignKey(verbose_name='Connection ID', to='database.Connection'),
        ),
        migrations.AlterUniqueTogether(
            name='availableconnections',
            unique_together=set([('mac_address', 'bot_id')]),
        ),
    ]
